function loadConfig(){localStorage.getItem("darkMode")==1&&document.documentElement.setAttribute("data-bs-theme","dark")}function toggleDarkMode(){localStorage.getItem("darkMode")==1?(localStorage.setItem("darkMode",0),document.documentElement.setAttribute("data-bs-theme","light")):(localStorage.setItem("darkMode",1),document.documentElement.setAttribute("data-bs-theme","dark"))}function getPlanRange(e){switch(!0){case e<=1800:return 200;case e<=2600:return 400;default:return 1e3}}function loadPlan(e,t,n){const s=document.getElementById("progress"+e);if(s){const o=getPlanRange(e);if(s.max=o,s.value=t,s.title=Math.ceil(n)+"%",100<=n){const e=s.parentNode.parentNode.firstChild;e.textContent="✔️"}}}function openDB(){return new Promise((e,t)=>{const n=indexedDB.open("vocabee");n.onsuccess=t=>e(t.target.result),n.onerror=()=>t(new Error("failed to open db")),n.onupgradeneeded=e=>{const t=e.target.result;t.createObjectStore("index",{keyPath:"level"});const n=t.createObjectStore("words",{keyPath:"lemma"});n.createIndex("level","level",{unique:!1})}})}function getIndex(e){return new Promise((t,n)=>{let o;const i="index",s=e.transaction(i,"readonly"),a=s.objectStore(i).getAll();s.oncomplete=()=>t(o),s.onerror=e=>n(e),a.onsuccess=e=>{o=e.target.result}})}async function loadPlansFromIndexedDB(){const e=await openDB(),t=await getIndex(e);t.forEach(e=>{const t=e.level,n=e.known||0,s=getPlanRange(t),o=n*100/s||0;loadPlan(t,n,o)})}function exportIndexedDB(e){return new Promise((t,n)=>{const s=indexedDB.open(e);s.onerror=()=>n(s.error),s.onsuccess=()=>{const e=s.result,i=e.transaction(e.objectStoreNames,"readonly"),o={};let a=e.objectStoreNames.length;for(const r of e.objectStoreNames){const c=i.objectStore(r),s=c.getAll();s.onsuccess=()=>{o[r]=s.result,--a===0&&t(JSON.stringify(o,null,2))},s.onerror=()=>n(s.error)}}})}function importIndexedDB(e,t){const n=JSON.parse(t);return new Promise((t,s)=>{const o=indexedDB.open(e);o.onupgradeneeded=()=>{const e=o.result;for(const t in n)e.objectStoreNames.contains(t)||e.createObjectStore(t,{keyPath:"id",autoIncrement:!0})},o.onsuccess=()=>{const i=o.result,e=i.transaction(Object.keys(n),"readwrite");for(const t in n){const s=e.objectStore(t);for(const e of n[t])s.put(e)}e.oncomplete=()=>t(),e.onerror=()=>s(e.error)},o.onerror=()=>s(o.error)})}function deleteIndexedDB(e){return new Promise((t,n)=>{const s=indexedDB.deleteDatabase(e);s.onsuccess=()=>{alert("データを削除しました。"),t()},s.onerror=()=>{alert("データの削除に失敗しました。"),n(s.error)},s.onblocked=()=>{alert("データの削除がブロックされました。タブを閉じてください。")}})}async function importDB(){const e=await navigator.clipboard.readText();try{await importIndexedDB("vocabee",e),alert("データの読み込みに成功しました。")}catch{alert("データの読み込みに失敗しました。")}}async function exportDB(){const e=await exportIndexedDB("vocabee");await navigator.clipboard.writeText(e),alert("クリップボードにコピーしました。")}async function deleteDB(){await deleteIndexedDB("vocabee")}loadConfig(),loadPlansFromIndexedDB(),document.getElementById("toggleDarkMode").onclick=toggleDarkMode,document.getElementById("importDB").onclick=importDB,document.getElementById("exportDB").onclick=exportDB,document.getElementById("deleteDB").onclick=deleteDB